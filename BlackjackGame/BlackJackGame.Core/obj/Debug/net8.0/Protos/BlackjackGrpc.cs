// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/blackjack.proto
// </auto-generated>
// Original file comments:
// BlackjackGame.Core/Protos/blackjack.proto
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace BlackjackGame.Core.Protos {
  /// <summary>
  /// Der Blackjack Service definiert die RPC-Methoden für das Spiel
  /// </summary>
  public static partial class BlackjackService
  {
    static readonly string __ServiceName = "blackjack.BlackjackService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.JoinRequest> __Marshaller_blackjack_JoinRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.JoinRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.JoinResponse> __Marshaller_blackjack_JoinResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.JoinResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.BetRequest> __Marshaller_blackjack_BetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.BetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.GameStateResponse> __Marshaller_blackjack_GameStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.GameStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.ActionRequest> __Marshaller_blackjack_ActionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.ActionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.GameStateRequest> __Marshaller_blackjack_GameStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.GameStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::BlackjackGame.Core.Protos.NewRoundRequest> __Marshaller_blackjack_NewRoundRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::BlackjackGame.Core.Protos.NewRoundRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::BlackjackGame.Core.Protos.JoinRequest, global::BlackjackGame.Core.Protos.JoinResponse> __Method_JoinGame = new grpc::Method<global::BlackjackGame.Core.Protos.JoinRequest, global::BlackjackGame.Core.Protos.JoinResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinGame",
        __Marshaller_blackjack_JoinRequest,
        __Marshaller_blackjack_JoinResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::BlackjackGame.Core.Protos.BetRequest, global::BlackjackGame.Core.Protos.GameStateResponse> __Method_PlaceBet = new grpc::Method<global::BlackjackGame.Core.Protos.BetRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlaceBet",
        __Marshaller_blackjack_BetRequest,
        __Marshaller_blackjack_GameStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::BlackjackGame.Core.Protos.ActionRequest, global::BlackjackGame.Core.Protos.GameStateResponse> __Method_Hit = new grpc::Method<global::BlackjackGame.Core.Protos.ActionRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hit",
        __Marshaller_blackjack_ActionRequest,
        __Marshaller_blackjack_GameStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::BlackjackGame.Core.Protos.ActionRequest, global::BlackjackGame.Core.Protos.GameStateResponse> __Method_Stand = new grpc::Method<global::BlackjackGame.Core.Protos.ActionRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stand",
        __Marshaller_blackjack_ActionRequest,
        __Marshaller_blackjack_GameStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::BlackjackGame.Core.Protos.GameStateRequest, global::BlackjackGame.Core.Protos.GameStateResponse> __Method_GetGameState = new grpc::Method<global::BlackjackGame.Core.Protos.GameStateRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGameState",
        __Marshaller_blackjack_GameStateRequest,
        __Marshaller_blackjack_GameStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::BlackjackGame.Core.Protos.NewRoundRequest, global::BlackjackGame.Core.Protos.GameStateResponse> __Method_StartNewRound = new grpc::Method<global::BlackjackGame.Core.Protos.NewRoundRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartNewRound",
        __Marshaller_blackjack_NewRoundRequest,
        __Marshaller_blackjack_GameStateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BlackjackGame.Core.Protos.BlackjackReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BlackjackService</summary>
    [grpc::BindServiceMethod(typeof(BlackjackService), "BindService")]
    public abstract partial class BlackjackServiceBase
    {
      /// <summary>
      /// Verbindung zum Spiel herstellen und Spieler registrieren
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::BlackjackGame.Core.Protos.JoinResponse> JoinGame(global::BlackjackGame.Core.Protos.JoinRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Einen Einsatz platzieren
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::BlackjackGame.Core.Protos.GameStateResponse> PlaceBet(global::BlackjackGame.Core.Protos.BetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Karte ziehen (Hit)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::BlackjackGame.Core.Protos.GameStateResponse> Hit(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Keine weiteren Karten nehmen (Stand)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::BlackjackGame.Core.Protos.GameStateResponse> Stand(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Status des Spiels abrufen
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::BlackjackGame.Core.Protos.GameStateResponse> GetGameState(global::BlackjackGame.Core.Protos.GameStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Neue Runde starten
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::BlackjackGame.Core.Protos.GameStateResponse> StartNewRound(global::BlackjackGame.Core.Protos.NewRoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BlackjackService</summary>
    public partial class BlackjackServiceClient : grpc::ClientBase<BlackjackServiceClient>
    {
      /// <summary>Creates a new client for BlackjackService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BlackjackServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BlackjackService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BlackjackServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BlackjackServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BlackjackServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Verbindung zum Spiel herstellen und Spieler registrieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.JoinResponse JoinGame(global::BlackjackGame.Core.Protos.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verbindung zum Spiel herstellen und Spieler registrieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.JoinResponse JoinGame(global::BlackjackGame.Core.Protos.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinGame, null, options, request);
      }
      /// <summary>
      /// Verbindung zum Spiel herstellen und Spieler registrieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.JoinResponse> JoinGameAsync(global::BlackjackGame.Core.Protos.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verbindung zum Spiel herstellen und Spieler registrieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.JoinResponse> JoinGameAsync(global::BlackjackGame.Core.Protos.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinGame, null, options, request);
      }
      /// <summary>
      /// Einen Einsatz platzieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse PlaceBet(global::BlackjackGame.Core.Protos.BetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaceBet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Einen Einsatz platzieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse PlaceBet(global::BlackjackGame.Core.Protos.BetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlaceBet, null, options, request);
      }
      /// <summary>
      /// Einen Einsatz platzieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> PlaceBetAsync(global::BlackjackGame.Core.Protos.BetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaceBetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Einen Einsatz platzieren
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> PlaceBetAsync(global::BlackjackGame.Core.Protos.BetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlaceBet, null, options, request);
      }
      /// <summary>
      /// Karte ziehen (Hit)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse Hit(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Hit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Karte ziehen (Hit)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse Hit(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hit, null, options, request);
      }
      /// <summary>
      /// Karte ziehen (Hit)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> HitAsync(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Karte ziehen (Hit)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> HitAsync(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hit, null, options, request);
      }
      /// <summary>
      /// Keine weiteren Karten nehmen (Stand)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse Stand(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stand(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Keine weiteren Karten nehmen (Stand)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse Stand(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stand, null, options, request);
      }
      /// <summary>
      /// Keine weiteren Karten nehmen (Stand)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> StandAsync(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StandAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Keine weiteren Karten nehmen (Stand)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> StandAsync(global::BlackjackGame.Core.Protos.ActionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stand, null, options, request);
      }
      /// <summary>
      /// Status des Spiels abrufen
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse GetGameState(global::BlackjackGame.Core.Protos.GameStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Status des Spiels abrufen
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse GetGameState(global::BlackjackGame.Core.Protos.GameStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGameState, null, options, request);
      }
      /// <summary>
      /// Status des Spiels abrufen
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> GetGameStateAsync(global::BlackjackGame.Core.Protos.GameStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGameStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Status des Spiels abrufen
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> GetGameStateAsync(global::BlackjackGame.Core.Protos.GameStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGameState, null, options, request);
      }
      /// <summary>
      /// Neue Runde starten
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse StartNewRound(global::BlackjackGame.Core.Protos.NewRoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartNewRound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Neue Runde starten
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::BlackjackGame.Core.Protos.GameStateResponse StartNewRound(global::BlackjackGame.Core.Protos.NewRoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartNewRound, null, options, request);
      }
      /// <summary>
      /// Neue Runde starten
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> StartNewRoundAsync(global::BlackjackGame.Core.Protos.NewRoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartNewRoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Neue Runde starten
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::BlackjackGame.Core.Protos.GameStateResponse> StartNewRoundAsync(global::BlackjackGame.Core.Protos.NewRoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartNewRound, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BlackjackServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BlackjackServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BlackjackServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_JoinGame, serviceImpl.JoinGame)
          .AddMethod(__Method_PlaceBet, serviceImpl.PlaceBet)
          .AddMethod(__Method_Hit, serviceImpl.Hit)
          .AddMethod(__Method_Stand, serviceImpl.Stand)
          .AddMethod(__Method_GetGameState, serviceImpl.GetGameState)
          .AddMethod(__Method_StartNewRound, serviceImpl.StartNewRound).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BlackjackServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_JoinGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BlackjackGame.Core.Protos.JoinRequest, global::BlackjackGame.Core.Protos.JoinResponse>(serviceImpl.JoinGame));
      serviceBinder.AddMethod(__Method_PlaceBet, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BlackjackGame.Core.Protos.BetRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(serviceImpl.PlaceBet));
      serviceBinder.AddMethod(__Method_Hit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BlackjackGame.Core.Protos.ActionRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(serviceImpl.Hit));
      serviceBinder.AddMethod(__Method_Stand, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BlackjackGame.Core.Protos.ActionRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(serviceImpl.Stand));
      serviceBinder.AddMethod(__Method_GetGameState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BlackjackGame.Core.Protos.GameStateRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(serviceImpl.GetGameState));
      serviceBinder.AddMethod(__Method_StartNewRound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::BlackjackGame.Core.Protos.NewRoundRequest, global::BlackjackGame.Core.Protos.GameStateResponse>(serviceImpl.StartNewRound));
    }

  }
}
#endregion
